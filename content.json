{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://errocks.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-10-11T05:22:38.100Z","updated":"2022-08-09T03:22:13.903Z","comments":false,"path":"/404.html","permalink":"https://errocks.github.io/404.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-10-11T05:22:38.099Z","updated":"2022-08-09T03:22:13.904Z","comments":false,"path":"repository/index.html","permalink":"https://errocks.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-10-11T05:22:38.100Z","updated":"2022-08-09T03:22:13.904Z","comments":true,"path":"links/index.html","permalink":"https://errocks.github.io/links/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-10-11T05:22:38.099Z","updated":"2022-08-09T03:22:13.903Z","comments":false,"path":"books/index.html","permalink":"https://errocks.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-10-11T05:22:38.099Z","updated":"2022-08-09T03:22:13.903Z","comments":false,"path":"about/index.html","permalink":"https://errocks.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"标签","date":"2022-10-11T05:22:38.100Z","updated":"2022-08-09T03:22:13.904Z","comments":false,"path":"tags/index.html","permalink":"https://errocks.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-11-07T16:03:45.314Z","updated":"2022-11-07T16:03:45.314Z","comments":false,"path":"categories/index.html","permalink":"https://errocks.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World2323","slug":"hello-world2","date":"2022-08-09T07:12:13.883Z","updated":"2022-08-09T07:12:44.812Z","comments":true,"path":"2022/08/09/hello-world2/","link":"","permalink":"https://errocks.github.io/2022/08/09/hello-world2/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Deploy to remote sites1","categories":[{"name":"文章分类","slug":"文章分类","permalink":"https://errocks.github.io/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"hello","slug":"hello","permalink":"https://errocks.github.io/tags/hello/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-08-09T01:25:24.102Z","updated":"2022-11-07T15:55:01.508Z","comments":true,"path":"2022/08/09/hello-world/","link":"","permalink":"https://errocks.github.io/2022/08/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Deploy to remote sites1","categories":[{"name":"文章分类1","slug":"文章分类1","permalink":"https://errocks.github.io/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB1/"}],"tags":[{"name":"hello","slug":"hello","permalink":"https://errocks.github.io/tags/hello/"}]},{"title":"网络问题总结","slug":"网络问题总结","date":"2022-08-08T15:53:58.517Z","updated":"2022-08-09T08:28:46.265Z","comments":true,"path":"2022/08/08/网络问题总结/","link":"","permalink":"https://errocks.github.io/2022/08/08/%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/","excerpt":"","text":"运输层运输层主要是UDP、TCP相关的问题。 为什么需要三次握手 tcp连接的双方要确保各自的收发消息的能力都是正常的。 客户端第一次发送握手消息到服务端， 服务端接收到握手消息后把ack和自己的syn一同发送给客户端，这是第二次握手， 当客户端接收到服务端发送来的第二次握手消息后，客户端可以确认“服务端的收发能力OK，客户端的收发能力OK”，但是服务端只能确认“客户端的发送OK，服务端的接收OK”， 所以还需要第三次握手，客户端收到服务端的第二次握手消息后，发起第三次握手消息，服务端收到客户端发送的第三次握手消息后，就能够确定“服务端的发送OK，客户端的接收OK”， 至此，客户端和服务端都能够确认自己和对方的收发能力OK，，tcp连接建立完成。 什么是TIME_WAIT 主动发起关闭放, 收到对方的FIN-n的时候就会进入TIME_WAIT, 等待2MSL 时间(60秒) 就会关闭连接 为什么要有TIME_WAIT? 为了网络传输的可靠性-&gt;容错性如果主机 1 没有维护 TIME_WAIT 状态，而直接进入 CLOSED 状态，它就失去了当前状态的上下文，只能回复一个 RST 操作，从而导致被动关闭方出现错误。可能还有数据没发完第二个理由和连接“化身”和报文迷走有关系，为了让旧连接的重复分节在网络中自然消失。我们知道，在网络中，经常会发生报文经过一段时间才能到达目的地的情况，产生的原因是多种多样的，如路由器重启，链路突然出现故障等。如果迷走报文到达时，发现 TCP 连接四元组（源 IP，源端口，目的 IP，目的端口）所代表的连接不复存在，那么很简单，这个报文自然丢弃。我们考虑这样一个场景，在原连接中断后，又重新创建了一个原连接的“化身”，说是化身其实是因为这个连接和原先的连接四元组完全相同，如果迷失报文经过一段时间也到达，那么这个报文会被误认为是连接“化身”的一个 TCP 分节，这样就会对 TCP 通信产生影响。 出现大量TIME_WAIT的原因 同时大量关闭连接大量TIME_WAIT可能导致以下的问题 是内存占用 端口资源占用 TCP协议如何提高传输效率 发送窗口 糊涂窗口问题 需要在自己的缓冲区大到一个合理的值之后，再向发送端发送窗口更新通知。这个合理的值，由对应的 RFC 规范定义 在发送端进行优化。这个优化的算法叫做** Nagle 算法**，Nagle 算法的本质其实就是限制大批量的小数据包同时发送，为此，它提出，在任何一个时刻，未被确认的小数据包不能超过一个。这里的小数据包，指的是长度小于最大报文段长度 MSS 的 TCP 分组。这样，发送端就可以把接下来连续的几个小数据包存储起来，等待接收到前一个小数据包的 ACK 分组之后，再将数据一次性发送出去。 在接收端进行优化，这个优化的算法叫做延时 ACK。延时 ACK 在收到数据后并不马上回复，而是累计需要发送的 ACK 报文，等到有数据需要发送给对端时，将累计的 ACK捎带一并发送出去。当然，延时 ACK 机制，不能无限地延时下去，否则发送端误认为数据包没有发送成功，引起重传，反而会占用额外的网络带宽 为什么断连要四次? 不一定四次, 有可能第二第三次会合并, 要确认双方的可靠传输, 可靠传输 , 其中包括不影响原有的业务, 客户端, 服务端都需要一来一回的确认收发没问题, 才关闭 TCP协议切片 流量控制机制 发送窗口反应了作为单 TCP 连接、点对点之间的流量控制模型，它是需要和接收端一起共同协调来调整大小的；而拥塞窗口则是反应了作为多个 TCP 连接共享带宽的拥塞控制模型，它是发送端独立地根据网络状况来动态调整的在任何一个时刻，TCP 发送缓冲区的数据是否能真正发送出去，至少取决于两个因素，一个是当前的发送窗口大小，另一个是拥塞窗口大小，而 TCP 协议中总是取两者中最小值作为判断依据 滑动窗口为0时怎么办？ 如果在PT超时之前没有接收到B window更新，则定时器触发，动作为1）发送一个byte 合法数据（滑动窗口内）或非法数据（滑动窗口外）2）刷新定时器3）记录超时次数如果超时次数到达极限，则事件触发，动作为1）reset 或关闭TCP连接2）通知应用层出错原因 TCP首部结构 TCP怎么保证可靠性？（控制包大小、包序号、校验和、接收端丢弃重复数据、流量控制、拥塞控制、ARQ协议、超时重传） seq为何要各自保存？ack的计算方法？ 第三次握手失败了怎么办？ UDP和TCP的区别 如何改造UDP，确保数据有序？ 什么是多路复用？ 极客时间 一段数据流从客户端到服务端, 总共拷贝了多少次? 如果是mmp, 0拷贝, 应该是1次? 内核到发送缓冲区, 包括服务端就2次 socket的缓冲区能否搞的很大? 增加程序的吞吐量","categories":[{"name":"文章分类","slug":"文章分类","permalink":"https://errocks.github.io/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"hello","slug":"hello","permalink":"https://errocks.github.io/tags/hello/"}]}],"categories":[{"name":"文章分类","slug":"文章分类","permalink":"https://errocks.github.io/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB/"},{"name":"文章分类1","slug":"文章分类1","permalink":"https://errocks.github.io/categories/%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB1/"}],"tags":[{"name":"hello","slug":"hello","permalink":"https://errocks.github.io/tags/hello/"}]}